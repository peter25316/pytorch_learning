# -*- coding: utf-8 -*-
"""00_pytorch_fundamentals_video.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rxWsT0Wg5ZyHwXxvywVH5SK4k8gBnVDi

## 00. PyTorch Fundamentals

Resource notebook: https://www.learnpytorch.io/00_pytorch_fundamentals/
"""

import torch
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
print(torch.__version__)

"""## Introduction to Tensors

### Creating tensors

PyTorch tensors are created using `torch.Tensor()` -> https://pytorch.org/docs/stable/tensors.html
"""

# scalar
scalar = torch.tensor(7)
scalar

scalar.ndim

# Get tensor back as Python int
scalar.item()

# Vector
vector = torch.tensor([7,7])
vector

vector.ndim

vector.shape

# MATRIX
MATRIX = torch.tensor([[7, 8], [9, 10]])

MATRIX

MATRIX.ndim

MATRIX[1]

MATRIX.shape

# TENSOR
TENSOR = torch.tensor([[[1, 2, 3], [3, 6, 9], [2, 4, 5]]])
TENSOR

TENSOR.ndim

TENSOR.shape
# torch.Size([1, 3, 3]) meaning we have 1 3x3 shape tensor

TENSOR[0]

"""### Random tensors

Why random tensors?

Random tensors are important because the way many neural networks learn is that they start with tensors full of random numbers and then adjust those random numbers to better represent the data.

`Start with random numbers -> look at data -> update random numbers -> look at data -> update random numbers`
"""

# Create a random tensor of size (3, 4)
random_tensor= torch.rand(3, 4)
random_tensor

# Create a random tensor with similar shape to an image tensor
random_image_size_tensor = torch.rand(size=(3 ,224, 224)) # color channels, height, width (B, G , R)
random_image_size_tensor.shape, random_image_size_tensor.ndim

"""### Zeros and ones"""

# Create a tensor of all zeros
zeros = torch.zeros(size=(3, 4))
zeros

# Create a tensor of all ones
ones = torch.ones(size=(3, 4))
ones

ones.dtype

random_tensor.dtype

"""### Creating a range of tensors and tensors-like"""

# Use torch.arange()
one_to_ten = torch.arange(start=1, end=11, step=1)
one_to_ten

# Create tensors like
ten_zeros = torch.zeros_like(input=one_to_ten)
ten_zeros



